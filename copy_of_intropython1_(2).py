# -*- coding: utf-8 -*-
"""Copy of IntroPython1 (2).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d2T9-0IGhce2ax3bSLSHOyqXjlbXBU4g

# **Python: From Tools to Healthcare Applications**

*Week 1*

# Numbers

Python can perform mathematical operations, something you will likely use if you work with data in Python. There are different types of numbers -- integers are whole numbers (no decimals) that can be either positive or negative. Floats are numbers with decimals. Python also has complex numbers but we will not cover that here. Python arithmetic operations follow the order of operations -- PEMDAS (parentheses, exponents, division, addition, subtraction).

## Addition
"""

2.0+10

2+10

"""### Checking Type"""

type(2+10) # this is a comment. type(...) tells us the type of number inside the parentheses, here 12

type(2.0+10)  # mixed types (mixed integers / floats) convert to float

"""## Multiplication"""

2.0*10

2*10

"""## Subtraction"""

50 - 5*6

"""## Division

Also, note that order of operations holds in python, and you can use parentheses to group operations.
"""

"""
this is a multiline comment.
division always returns a float
"""

(50 - 5*6)/4

type((50 - 5*6)/4)

"""### Integer Division"""

10//8 # Integer division

type(5//8)

"""## Modulo
Modulo is an operation that you may not be familiar with from your elementary school math classes. Modulo, `a%b`, calculates the remainder of `a` when divided by `b`.

"""

17//5

17%3

5*3 + 2#quotient * divisor + remainder

"""### Exercise:

What will `7%3` be?

## Exponentiation
"""

2**3 # 2 cubed

2.5**(-3/2)

"""## Exercises:
For each of the following, what will the output be, and what type will it be?

1. `3 + 2/1`
2. `3 + 2 //1`
3. `3.0 + 2//1`
4. `2**2*2/3`
5. `5%2 -3`


"""

5%2 -3

3+2 //1

3.0+ 2//1

2**2*2/3

3+2/1

10//3 %2

"""# Defining Variables

Variables let you store values and work with them by name.

In python, variables can change types after they are created.

> Rules for Python variables:
- A variable name must start with a letter or the underscore character
- A variable name cannot start with a number
- A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )
- Variable names are case-sensitive (age, Age and AGE are three different variables)
- In Python, typically use snake case (separate words by underscores)

(Taken from https://www.w3schools.com/python/gloss_python_variable_names.asp)





"""

number = 17

number

quotient # undefined variable returns an error

quotient = 17//3 # how else could we write this?
# quotient = 5

"""Could we use `number` to define quotient? Do so below."""

quotient = number//3

quotient

remainder = number%3

remainder

quotient *3 +remainder

"""# Check for equality"""

17 == 17 # 17 is equal to 17

17==16 # 17 is equal to 16

quotient*3 + remainder == number

"""# Exercise:
What will the following blocks of code give?



```
# Exercise 1
a = 22
b = 21
a == b
```



```
# Exercise 2
a = 22
b = 22
c = a
a == b
```


```
# Exercise 3
1a = 1
b = 22
1a == b
```

"""



a=22
b=21
a==b

"""# Strings

Strings are a data type for working with text.
"""

'hello world string'

"also a hello world string" # can use single or double quotes

"isn't it nice to use double quotes sometimes?"

'isn\t it nice to use quotes' # use backward slash to put in apostrophe when using sing;e quotation marks

'it isn\'t nice to use single quotes sometimes' # can use the escape(\) character to use a character that would otherwise do something else.

'she said "single quotes can be nice too"'

"she said \"but it's still doable with double quotes\""

"""hmm there's a weird character in there. what does it look like if we print it?"""

print("she said \"but it's still doable with double quotes\"") # ah much better

"""## Print

Print is something called a function -- we will learn more about functions next time. Functions take 0 or more inputs and runs some code.

### Help

Use help to find out what a function does (sometimes hovering won't work). You can also google the function to find out what it does. The description of what a function does is called a "docstring." We will learn more about docstrings when we learn about functions next class.
"""

help(print)

"""In jupyter, you can also use `print?`."""

# docstring
print?

# with non built in functions, will show the code for the function
print??

print("to include a slash \\")

print("path\to\name") # what happened? How would you fix this? \t means tab

print("path to name")

print("path\\to\\name")

"""## Raw Strings

Raw strings take characters as they are and slash is not treated as an escape.
"""

print(r"path\to\name") # make it a raw string, what else could we do (see above on including a slash)

"""## [Optional / At Home] Multiline Strings

You can define strings that have multiple lines by enclosing them in triple quotes as `'''string'''` or `'''string'''`.
"""

print("start")
# without slash adds a new line at start, with escapes the newline
print("""
woah
I
have \
many lines""")
print("""\
woah
I
have \
many lines
""")
print("end")

"""## string concatenation & multiplication

You can repeat strings by multiplying them by the number of repeats you want, and you can concatenate strings using the addition symbol.
"""

"neuro"*3 + "science"

"""## Indexing
You can extract individual characters from a string by *indexing* into the string. In Python, indexing starts from 0, so `word[0]` gives the first character in the string `word`
"""

word='neuro'
print(word)
word[0]

word[5] # because we start from 0 and there are 5 letters in word, 5 is out of range.

word = 'neuro'
len(word) # get the length of word. There are five characters in the string word -- n, e, u, r, and o

word[4] # what will this give us?

word[-1] # we can get the last character by using -1, use for very long strings

word[-2] # second from last

word[-6] # sixth from last

"""## Exercise

What will the following print statements print?

```
exercise_word = "foo\\"


print(exercise_word) #1
print(len(exercise_word)) #2
print(exercise_word[1]) #3
print(exercise_word[5]) #4
print(exercise_word[-1]) #5
print(exercise_word*3 + "bar") #6
print(exercise_word) #7
exercise_word = "new exercise word"
print(exercise_word) #8
```


"""

exercise_word = "foo\\"
print(exercise_word)
print(len(exercise_word))
print(exercise_word[1])
print(exercise_word[-1])
print(exercise_word*3 + "bar")
print(exercise_word)

"""# Bools

Python's bool datatype stores l logical values of `True` or `False`. Bools are named for Boolean logic which specifies operations that can be done between `True` and `False` values, specifically `and`, `or`, and `not`. The rules for boolean logic are listed below:

| A | B | A and B | A or B | not A |
|---|---|---------|--------|-------|
| T | T | T       | T      | F     |
| T | F | F       | T      | F     |
| F | T | F       | T      | T     |
| F | F | F       | F      | T     |
"""

True and True

True and False

False and False

True or False

False or False

True or True

not True

"""### Order of operations:

`not` first, then `and`, then `or`
"""

True or (not True) and False

(True or (not True)) and False

"""## Comparison operations
Comparison operations let us define booleans from other datatypes based on the values of those datatypes.
* less than or equal `<=`
* less than `<`
* greater than or equal `>=`
* greater than `>`
* not equal `!=`
* is equal to `==`




"""

print(8<10)
print(10 < 10)
print(10 <= 10)

neuroscience ='fun'
python = 'fun'

# What will this print?
print(neuroscience == 'fun' and python == 'fun')
print(neuroscience == 'fun' or python == 'fun')

neuroscience ='fun'
python = 'cool'

# What will this print?
print(neuroscience == 'fun' and python == 'fun')
print(neuroscience == 'fun' or python == 'fun')

neuroscience ='funny'
python = 'cool'

# What will this print?
print(neuroscience == 'fun' and python == 'fun')
print(neuroscience == 'fun' or python == 'fun')

x = 5 # What will this print?
print(x < 10 and x > 0)

x = 10 # What will this print?
print(x < 10 and x > 0)

x = 0 # What will this print?
print(x < 10 and x > 0)

"""### Exercise:

Write code like in the above examples that prints `True` if a variable, `y`, is greater than 10 or less than -10, and `False` otherwise.

Test that it does what it should for y=10 (False), y=-10 (False), y = 11 (True), y = -11 (True)
"""

y = -11
print(y > 10 or y < -10)

"""## Boolean Casting

Most python data objects evaluate to true except for the empty string and 0, as well as empty list, empty tuple and empty dictionaries (more about these data types next class)

What is each of the datatypes inside the parentheses?
"""

bool('') # what is this?

bool(0) # what is this?

bool(0.0) # what is this?

bool([]) # list

bool(()) # tuple

bool({}) # dictionary

bool(None) #NoneType -- this is a special type often used a placeholder. We will see more about it next time.

bool(None) #NoneType -- this is a special type often used a placeholder. We will see more about it next time.

type(None)

"""## If / else statements

If / else statements let us run code only if code evaluates to True.

Python uses indentation after a colon to indicate code blocks.

So for example, below if x is equal to 6, the code in the code block, `print("hi")` will run, otherwise it will not run.

```
if x==6:
    print("hi")

```

An `else` statement after an `if` statement tells Python to run the code inside the `else` codeblock if the `if` codeblock was not run.

The below codeblock prints exactly what it says it will.

```
if x == 6:
    print("x is 6")
else:
    print("x is not 6")
```

`elif` statements can be placed after after an `if` statement. `elif` statements are checked in order if none of the previous codeblock have run. Python runs code inside an `elif` codeblock if none of the preceding `if` and `elif` statements were true, and if that `elif` statement is True.

```
if x == 6:
    print("x is 6")
elif x%2 == 0:
    print("x is even")
elif x%2 == 1:
    print("x is odd")
else:
    print("You should never get here -- every number is either even or odd")
```
"""

num=9 # What will this do?
if num%2 ==1:
    print("foo")

num=8 # What will this do?
if num%2 ==1:
    print("foo")

num = 8 # What will this do?
if num%2 ==1:
    print("foo")
else:
    print("bar")

num = 9 # What will this do?
if num%2 ==1:
    print("foo")
else:
    print("bar")

num = 3 # What will this do?
if num %2 ==1:
  print("foo")
elif num %3 == 0: # else if
  print("bar")
else:
  print("foobar")

num = 6 # What will this do?
if num %2 ==1:
  print("foo")
elif num %3 == 0: # else if
  print("bar")
else:
  print("foobar")

num = 4 # What will this do?
if num %2 ==1:
  print("foo")
elif num %3 == 0: # else if
  print("bar")
else:
  print("foobar")

"""## Exercise
1. Write something so that, given a variable called `my_number`, if it is less than or equal to 3, it prints "less than or equal to 3". Test it on `my_number=3` and `my_number=4`
2. Write something so that, given a variable called `my_number`, if it is less than or equal to 3, it prints "less than or equal to 3".  Otherwise, print ("greater than 3"), Test it on `my_number=3` and `my_number=4`.
3. Write something so that, given a variable called `my_int`, if it is not an integer, it prints "please give me an integer". Test it on `my_int=3` and `my_int=3.2`
4. Write something so that, given a variable called `my_int`, if it is not an integer, it prints "please give me an integer". Otherwise, if `my_int` is less than 0, print "negative". Test it on `my_int=0`, `my_int=3.2`, and `my_int=-1`.
5. Challenge:
- Write something so that, given a variable called `my_number`:
    - if it is not an integer, it prints "please give me an integer"
    - otherwise if it is less than 0 it prints "negative"
    - otherwise if it is between 0 and 10 it prints "digit"
    - otherwise it prints "we can't count this on our hands"
- Test it out by setting `my_number` to a few different values and making sure it does what you want / expect.
"""

my_number = 4
if my_number <= 3:
  print("less than or equal to 3")
else:
  print("greater than 3")

my_int = 3.2
if type(my_int) != int:
  print("please give me an integer")
elif my_int < 0:
  print("negative")

my_number = 10
if type(my_number) != int:
  print("please give me an integer")
elif my_number < 0:
  print("negative")
elif my_number > 0 and my_number < 10:
  print("digit")
else:
  print("we can't count this on our hands")